;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   OPcache class preloading     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Starting from PHP 7.4, OPcache can compile and load classes at start-up and make them available to all requests
; until the server is restarted, improving performance significantly.
; During container compilation (e.g. when running the cache:clear command), Symfony generates a file with the lis
; of classes to preload in the var/cache/ directory. Rather than use this file directly, use the config/preload.php
; file that is created when using Symfony Flex in your project
; keep in mind to change /skeleton here by the absolute path to your cli app project path
; if this file is missing, run this command to update the Symfony Flex recipe:
;  composer recipes:update symfony/framework-bundle.
; use the container.preload and container.no_preload service tags to define classes preloading by PHP.
opcache.preload=/__APP_NAME__/config/preload.php

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   OPcache for Maximum Performance  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The default OPcache configuration is not suited for Symfony applications,
; so it's recommended to change these settings as follows:
; maximum memory that OPcache can use to store compiled PHP files
opcache.memory_consumption=256

; maximum number of files that can be stored in the cache
opcache.max_accelerated_files=20000

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   Don't Check PHP Files Timestamps ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; In production servers, PHP files should never change, unless a new application version is deployed.
; However, by default OPcache checks if cached files have changed their contents since they were cached.
; This check introduces some overhead that can be avoided as follows:
; After each deployment, you must empty and regenerate the cache of OPcache. Otherwise you won't see the updates made in
; the application. You can use the cachetool utility to control  OPcache from the CLI by running :
; php cachetool.phar opcache:status --cli

opcache.validate_timestamps=0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  Configure the PHP realpath Cache  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; When a relative path is transformed into its real and absolute path, PHP caches the result to improve performance.
; Applications that open many PHP files, such as Symfony projects, should use at least these values:

; maximum memory allocated to store the results
realpath_cache_size=4096K

; save the results for 10 minutes (600 seconds)
realpath_cache_ttl=600